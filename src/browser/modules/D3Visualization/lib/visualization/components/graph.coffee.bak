###!
Copyright (c) 2002-2018 "Neo4j, Inc"
Network Engine for Objects in Lund AB [http://neotechnology.com]

This file is part of Neo4j.

Neo4j is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
###

'use strict'

class neo.models.Graph
  constructor: () ->
    @nodeMap = {}
    @_nodes = []
    @relationshipMap = {}
    @_relationships = []

  nodes: ->
    @_nodes

  relationships: ->
    @_relationships

  groupedRelationships: ->
    class NodePair
      constructor: (node1, node2) ->
        @relationships = []
        if node1.id < node2.id
          @nodeA = node1
          @nodeB = node2
        else
          @nodeA = node2
          @nodeB = node1

      isLoop: ->
        @nodeA is @nodeB

      toString: ->
        "#{@nodeA.id}:#{@nodeB.id}"
    groups = {}
    for relationship in @_relationships
      nodePair = new NodePair(relationship.source, relationship.target)
      nodePair = groups[nodePair] ? nodePair
      nodePair.relationships.push relationship
      groups[nodePair] = nodePair
    (pair for ignored, pair of groups)

  addNodes: (nodes) =>
    for node in nodes
      if !@findNode(node.id)?
        @nodeMap[node.id] = node
        @_nodes.push(node)
    @

  removerelationship: (r) =>
    @updateNode r.source
    @updateNode r.target
    @_relationships.splice(@_relationships.indexOf(r), 1)
    delete @relationshipMap[r.id]

  redrawRelationship: (r) =>
    @updateNode r.source
    @updateNode r.target
    @_relationships.splice(@_relationships.indexOf(r), 1)
    @_relationships.push(r)

  redrawAllRelationship: =>
    rels = @relationshipMap
    for own id, rel of rels
        @redrawRelationship rel
    @

  removeNode: (node) =>
    if @findNode(node.id)?
      delete @nodeMap[node.id]
      @_nodes.splice(@_nodes.indexOf(node), 1)
    @

  removeConnectedRelationships: (node) =>
    rels = @findAllRelationshipToNode node
    for r in rels
      @redrawRelationship r
      @removerelationship r
    @

  removeFloatingNodeAndRelationship: (node) =>
    floatingrels = @findAllRelationshipToFloatingNode node
    for r in floatingrels
      targetfixed = r.target.fixed ? 0
      sourcefixed = r.source.fixed ? 0
      if targetfixed is 0 or sourcefixed is 0
        if r.source is node
          if targetfixed is 0 
            @removeConnectedRelationships r.target
            @removeNode r.target
        else
          if sourcefixed is 0 
            @removeConnectedRelationships r.source
            @removeNode r.source
    do @redrawAllRelationship


  removeFloatingNodeAndAllRelationship: (node) =>
    for r in @findAllRelationshipToNode node
      targetfixed = r.target.fixed ? 0
      sourcefixed = r.source.fixed ? 0
      if targetfixed is 0 or sourcefixed is 0
        if r.source is node
          if targetfixed is 0 
            @removeConnectedRelationships r.target
            @removeNode r.target
        else
          if sourcefixed is 0 
            @removeConnectedRelationships r.source
            @removeNode r.source
      else
        @redrawRelationship(r)
        @removerelationship r
    @
 

  addRelationships: (relationships) =>
    for relationship in relationships
      existingRelationship = @findRelationship(relationship.id)
      if existingRelationship?
        existingRelationship.internal = false
      else
        relationship.internal = false
        @relationshipMap[relationship.id] = relationship
        @_relationships.push(relationship)
    @

  addInternalRelationships: (relationships) =>
    for relationship in relationships
      relationship.internal = true
      if not @findRelationship(relationship.id)?
        @relationshipMap[relationship.id] = relationship
        @_relationships.push(relationship)
    @

  pruneInternalRelationships: =>
    relationships = @_relationships.filter((relationship) -> not relationship.internal)
    @relationshipMap = {}
    @_relationships = []
    @addRelationships(relationships)

  findNode: (id) => @nodeMap[id]

  findNodeNeighbourIds: (id) =>
    @_relationships
      .filter((relationship) -> relationship.source.id is id or relationship.target.id is id)
      .map((relationship) ->
        if relationship.target.id is id
          return relationship.source.id
        return relationship.target.id
      )

  findRelationship: (id) => @relationshipMap[id]

  findAllRelationshipToNode: (node) =>
    @_relationships
      .filter((relationship) -> relationship.source.id is node.id or relationship.target.id is node.id)

  findAllRelationshipToFloatingNode: (node) =>
    @_relationships
      .filter((relationship) ->  (relationship.source.id is node.id and (relationship.target.fixed ? 0) is 0) or (relationship.target.id is node.id and (relationship.source.fixed ? 0) is 0 ))

   resetGraph: ->
      @nodeMap = {}
      @_nodes = []
      @relationshipMap = {}
      @_relationships = []
